// Generated by CoffeeScript 1.6.3
var _;

_ = require('lodash');

_.str = require('underscore.string');

_.mixin(_.str.exports());

module.exports = {
  model: function(items, info) {
    var _this = this;
    if (_.isArray(items)) {
      items = _.map(items, function(item) {
        return _this.model(item, info);
      });
      if (info.filter) {
        items = _.filter(items, function(item) {
          return _this.filter(item, info.filter);
        });
        if (info.without) {
          items = this.without(items, info.without);
        }
      }
      return items;
    }
    if (!_.isObject(items)) {
      return items;
    }
    return this._model(items, info);
  },
  _model: function(items, info) {
    if (info.arg && info.arg.path_prefix && info.primary_key && items[info.primary_key]) {
      items[info.primary_key] = this.rm_prefix(items[info.primary_key], info.arg.path_prefix);
    }
    if (info.pluck) {
      items = this.pluck(items, info.pluck);
    }
    if (info["default"]) {
      items = _.defaults(items, info["default"]);
    }
    if (info.field) {
      items = this.field(items, info.field, info.primary_key);
    }
    if (info.fields) {
      items = this.field(items, info.fields, info.primary_key);
    }
    if (info.without && !info.filter) {
      items = this.without(items, info.without);
    }
    if (info.rename) {
      items = this.rename(items, info.rename);
    }
    if (info.clean) {
      return items = this.clean(items);
    }
  },
  rm_prefix: function(full_str, prefix, strip_slash) {
    if (strip_slash == null) {
      strip_slash = true;
    }
    if (full_str.substring(0, prefix.length) === prefix) {
      full_str = full_str.substring(prefix.length);
      if (strip_slash && '/' === full_str.substring(0, 1)) {
        full_str = full_str.substring(1);
      }
    }
    return full_str;
  }
};
